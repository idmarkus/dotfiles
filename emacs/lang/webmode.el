

;; (setq web-mode-ac-sources-alist
;;   '(("css" . (ac-source-css-property))
;;     ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

;; Remove trailing ws on save
;; (add-hook 'local-write-file-hooks)

;; (defun move-backward-whitespace ()
;;   (interactive)
;;   (while (or (eq (char-before) ? )
;;              (eq (char-before) ?\n)
;;              (eq (char-before) ?\t)
;;              (eq (char-before) ?\r))
;;     (backward-char)))



(defun eq-char-whitespace (char)
  (or (eq char ? )
      (eq char ?\n)
      (eq char ?\t)
      (eq char ?\r)))
;; (defun backward-whitespace ()
;;   (interactive)
;;   (let ((oldpos (point)))
;;     (while (eq-char-whitespace (char-before))
;;       (backward-char))
;;     (= oldpos (point))))
;; (defun forward-whitespace ()
;;   (interactive)
;;   (let ((oldpos (point)))
;;     (while (eq-char-whitespace (char-after))
;;       (forward-char))
;;     (= oldpos (point))))


;; (defun eq-char-delimit (char)
;;   (or (eq char ? )
;;       (eq char ?\n)
;;       (eq char ?\t)
;;       (eq char ?\r)
;;       (eq char ?>)
;;       (eq char ?<)
;;       (eq char ?=)
;;       (eq char ?-)
;;       (eq char ?\")))

;; (defun backward-word-delimit-chars ()
;;   (interactive)
;;     (if (eq-delimit-char (char-before))
;;         (backward-char))
;;     (while (not (eq-delimit-char (char-before)))
;;       (backward-char))))

;; (defun backward-word-tag-delim ()
;;   (interactive)
;;   (let ((oldpos (point)))
;;     (move-backward-whitespace)
;;     (and (= oldpos (point))
;;          (backward-word-delimit-chars))))

(defun eq-char-html-kill-delimit (char)
  (or (eq-char-whitespace char)
      (eq char ?>)
      (eq char ?<)
      (eq char ?=)
      (eq char ?-)))

(defun backward-delete-word-html-delimit ()
  (interactive)
  (undo-boundary)
  (when (= (char-before) ? ) (delete-char -1))
  (when (not (backward-delete-ws-iter t))
    (let ((reinsert-chars ""))
      (while (eq-char-html-kill-delimit (char-before))
        (progn
          (setq reinsert-chars (concat reinsert-chars (char-to-string (char-before))))
          (delete-char-and-if-electric-pair-delete-forward-with-whitespace -1)
          ))
      (while (not (eq-char-html-kill-delimit (char-before)))
        (delete-char-and-if-electric-pair-delete-forward-with-whitespace -1))
      (when (or (eq-char-whitespace (char-before))
                (= (char-before) ?<))
        (delete-char -1))
      (when (eq reinsert-chars ">")
        (save-excursion (insert reinsert-chars)))
      )))

(defun forward-delete-word-html-delimit ()
  (interactive)
  (undo-boundary)
  (when (= (char-after) ? ) (delete-char 1))
  (let ((oldpos (point)))
    (while (eq-char-whitespace (char-after)) (delete-char 1))
    (when (= oldpos (point))
      (while (eq-char-html-kill-delimit (char-after))
        (delete-char 1))
        ;; (delete-char-and-if-electric-pair-delete-forward-with-whitespace 1))
      (while (not (eq-char-html-kill-delimit (char-after)))
        (delete-char 1))
        ;; (delete-char-and-if-electric-pair-delete-forward-with-whitespace 1))
      (when (or (eq-char-whitespace (char-after))
                (= (char-after) ?>))
          (delete-char 1)))))


(defun backward-kill-word-delimit-chars (delimit-chars &optional reinsert-space-chars)
  (interactive)
  (let ((delimit-chars-plus-ws (concat "[\t\n\r " delimit-chars "]")))
    (let ((reinsert-chars ""))
  ;; (let (delimit-chars-plus-ws (concat "[\t\n\r " delimit-chars "]"))
    (while (looking-back (concat "[" delimit-chars "]") 1)
      (setq reinsert-chars (concat reinsert-chars (char-to-string (char-before))))
      (delete-char-and-if-electric-pair-delete-forward-with-whitespace -1))
      ;; (delete-char -1))
    (while (not (looking-back delimit-chars-plus-ws 1))
      (delete-char-and-if-electric-pair-delete-forward-with-whitespace -1))
      ;; (delete-char -1))
    (if (looking-back "[\t\n\r ]" 1)
        (delete-char -1))
    (if (and (not (eq reinsert-space-chars nil))
             (looking-back (concat "[" reinsert-space-chars "]") 1))
        ;; (message "hi is %s" reinsert-chars
        (save-excursion (insert reinsert-chars))))
    ))

(defun hungry-backward-kill-word-html ()
  (interactive)
  (if (eq (char-before) ? ) (delete-char -1))
  (if (not (backward-delete-ws-iter t))
      (backward-kill-word-delimit-chars ">=" "=")
    t))


(defun if-inside-tag-move-outside ()
  (interactive)
  (if (looking-at "[^<]*?>")
      (progn (push-mark)
             (goto-char (match-end 0))
             t)
    nil))

(defun smart-close-tag ()
  (interactive)
  ;; (message "%S %S" (char-before) (char-before 2))
  (if (and (eq (char-before) ?<)
           (eq (char-after) ?>))
      (progn (delete-char-and-if-electric-pair-delete-forward-with-whitespace -1)
             (sgml-close-tag))
    (if (or (if-inside-tag-move-outside)
            (eq (char-before) ?>))
        (save-excursion (sgml-close-tag))
      (sgml-close-tag))))

(defun mhtml-mode-config ()
  (add-hook 'write-file-functions 'delete-trailing-whitespace nil 'local)
  ;; (add-hook 'post-self-insert-hook #'mhtml-close-tag-post-insert-hook nil 'local)
  (local-set-key "\M-o" 'find-file)
  (local-set-key "\M-t" 'sgml-close-tag)
  ;; (local-set-key (kbd "S-, /") 'sgml-close-tag)
  (local-set-key "\M-b" 'backward-word)
  ;; (local-set-key [C-backspace] 'hungry-backward-kill-word-html)
  (local-set-key [C-backspace] 'backward-delete-word-html-delimit)
  (local-set-key "\M-d" 'forward-delete-word-html-delimit)
  (define-key mhtml-mode-map "/" 'smart-close-tag)

  (setq sgml-quick-keys t))

(add-hook 'mhtml-mode-hook 'mhtml-mode-config)

;; (defun web-mode-hook-setup ()
;;   "Hooks for Web mode."
;;   (add-hook 'write-file-functions 'delete-trailing-whitespace)
;;   (setq web-mode-enable-current-column-highlight t)
;;   (setq web-mode-enable-current-element-highlight t)
;;   (setq web-mode-enable-auto-pairing t)
;;   (setq web-mode-enable-auto-closing t)

;;   (define-key web-mode-map (kbd "M-t") 'sgml-close-tag)
;;   (define-key web-mode-map [C-backspace] 'hungry-backward-kill-word-html)
;;   )

;; (add-hook 'web-mode-hook 'webmode-remove-trailing-whitespace)

;; (use-package web-mode
;;   :config
;;   (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
;;   (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
;;   (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
;;   (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
;;   (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
;;   (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
;;   (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
;;   (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
;;   ;; :defer
;;   (add-hook 'write-file-functions 'delete-trailing-whitespace)
;;   (setq web-mode-enable-current-column-highlight t)
;;   (setq web-mode-enable-current-element-highlight t)
;;   (setq web-mode-enable-auto-pairing t)
;;   (setq web-mode-enable-auto-closing t)

;;   (define-key web-mode-map (kbd "M-t") 'sgml-close-tag)
;;   (define-key web-mode-map [C-backspace] 'hungry-backward-kill-word-html)
;;   :defer
;; )


(provide 'webmode)
